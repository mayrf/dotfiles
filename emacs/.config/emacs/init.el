;; Don't show the splash screen(setq inhibit-startup-message t)(setq visible-bell t);; Turn off some unneeded UI elements(menu-bar-mode -1)  ; Leave this one on if you're a beginner!(tool-bar-mode -1)(scroll-bar-mode -1)(set-fringe-mode 10) ; Give some breathing room;; Display line numbers in every buffer(column-number-mode)(global-display-line-numbers-mode 1)(dolist (mode '(org-mode-hook		term-mode-hook		eshell-mode-hook		shell-mode-hook))  (add-hook mode (lambda () (display-line-numbers-mode 0))))(set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 140);;Load the Modus Vivendi darf theme;;(load-theme 'doom-gruvbox)(load-theme 'doom-palenight t);;(load-theme 'doom-laserwave);;(load-theme 'doom-outrun-electric);; Make ESC quit prompts(global-set-key (kbd "<escape>") 'keyboard-escape-quit);; Initialize package sources(require 'package)(setq package-archives '(("melpa" . "https://melpa.org/packages/")                         ("org" . "https://orgmode.org/elpa/")                         ("elpa" . "https://elpa.gnu.org/packages/")))(package-initialize)(unless package-archive-contents (package-refresh-contents));; Initialize use-package on non-Linux platforms(unless (package-installed-p 'use-package)   (package-install 'use-package))(require 'use-package)(setq use-package-always-ensure t)(use-package ivy  :diminish  :bind (("C-s" . swiper)         :map ivy-minibuffer-map         ("TAB" . ivy-alt-done)	         ("C-l" . ivy-alt-done)         ("C-j" . ivy-next-line)         ("C-k" . ivy-previous-line)         :map ivy-switch-buffer-map         ("C-k" . ivy-previous-line)         ("C-l" . ivy-done)         ("C-d" . ivy-switch-buffer-kill)         :map ivy-reverse-i-search-map         ("C-k" . ivy-previous-line)         ("C-d" . ivy-reverse-i-search-kill))  :config  (ivy-mode 1))(use-package counsel  :bind (("M-x" . counsel-M-x)	 ("C-x b" . counsel-ibuffer)	 ("C-x C-f" . counsel-find-file)         :map minibuffer-local-map	 ("C-r" . 'counsel-minibuffer-history)):config(setq ivy-initial-inputs-alist nil))(use-package doom-modeline  :ensure t  :init (doom-modeline-mode 1)  :custom ((doom-modeline-height 25)))  ;; You must run (all-the-icons-install-fonts) one time after  ;; installing this package!(use-package all-the-icons)(use-package doom-themes)(use-package rainbow-delimiters  :hook (prog-mode . rainbow-delimiters-mode))(use-package which-key  :init (which-key-mode)  :diminish which-key-mode  :config  (setq which-key-idle-delay 0.3))(use-package ivy-rich  :init  (ivy-rich-mode 1))(use-package helpful  :custom  (counsel-describe-function-function #'helpful-callable)  (counsel-describe-variable-function #'helpful-variable)  :bind  ([remap describe-function] . counsel-describe-function)  ([remap describe-symbol] . counsel-describe-symbol)  ([remap describe-variable] . counsel-describe-variable)  ([remap describe-command] . helpful-command)  ([remap describe-key] . helpful-key))(use-package general  :after evil  :config  (general-create-definer efs/leader-keys    :keymaps '(normal insert visual emacs)    :prefix "SPC"    :global-prefix "C-SPC")  (efs/leader-keys    "t"  '(:ignore t :which-key "toggles")    "tt" '(counsel-load-theme :which-key "choose theme")    "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))(use-package evil  :init  (setq evil-want-integration t)  (setq evil-want-keybinding nil)  (setq evil-want-C-u-scroll t)  (setq evil-want-C-i-jump nil)  :config  (evil-mode 1)  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)  ;; Use visual line motions even outside of visual-line-mode buffers  (evil-global-set-key 'motion "j" 'evil-next-visual-line)  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)  (evil-set-initial-state 'messages-buffer-mode 'normal)  (evil-set-initial-state 'dashboard-mode 'normal))(use-package evil-collection  :after evil  :config  (evil-collection-init))(use-package hydra  :defer t)(defhydra hydra-text-scale (:timeout 4)  "scale text"  ("j" text-scale-increase "in")  ("k" text-scale-decrease "out")  ("f" nil "finished" :exit t))(efs/leader-keys  "ts" '(hydra-text-scale/body :which-key "scale text"))(use-package projectile  :diminish projectile-mode  :config (projectile-mode)  :custom ((projectile-completion-system 'ivy))  :bind-keymap  ("C-c p" . projectile-command-map)  :init  ;; NOTE: Set this to the folder where you keep your Git repos!  (when (file-directory-p "~/Projects/Code")    (setq projectile-project-search-path '("~/Projects/Code")))  (setq projectile-switch-project-action #'projectile-dired))(use-package counsel-projectile  :after projectile  :config (counsel-projectile-mode))(use-package magit  :commands magit-status)  ;;:custom  ;;(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))(defun efs/org-font-setup ();; Set faces for heading levels  (dolist (face '((org-level-1 . 1.2)                  (org-level-2 . 1.1)                  (org-level-3 . 1.05)                  (org-level-4 . 1.0)                  (org-level-5 . 1.1)                  (org-level-6 . 1.1)                  (org-level-7 . 1.1)                  (org-level-8 . 1.1)))    (set-face-attribute (car face) nil :font "Bookerly" :weight 'regular :height (cdr face)))    (set-face-attribute (car face) nil :height (cdr face)))  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)  ;;(set-face-attribute 'line-number nil :inherit 'fixed-pitch)  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))(defun efs/org-mode-setup ()  (org-indent-mode)  (variable-pitch-mode 1)  (visual-line-mode 1))(use-package org  :hook (org-mode . efs/org-mode-setup)  :config  (setq org-ellipsis " ▾")  (efs/org-font-setup))(use-package org-bullets  :hook (org-mode . org-bullets-mode)  :custom  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))(defun efs/org-mode-visual-fill ()  (setq visual-fill-column-width 100        visual-fill-column-center-text t)  (visual-fill-column-mode 1))(use-package visual-fill-column  :hook (org-mode . efs/org-mode-visual-fill))(defun markdown-convert-buffer-to-org ()  "Convert the current buffer's content from markdown to orgmode format and save it with the current buffer's file name but with .org extension."  (interactive)  (shell-command-on-region (point-min) (point-max)    (format "pandoc -f markdown -t org -o %s"      (concat (file-name-sans-extension (buffer-file-name)) ".org"))))